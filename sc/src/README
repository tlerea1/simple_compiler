Tuvia Lerea
tlerea1@jhu.edu

make will compile sc
to run: ./sc

HW8:

For this assignment I added else if, booleans, and procedures. Else if was the simple
change. Booleans required adding a new type. Booleans in my implementation are essentially
typedef'd ints. They have a value of 1 for true, and 0 for false. TRUE and FALSE are just
declared as global constants in the universe scope. A new type of binary was added, a relational
binary, this enabled the getOpposite function for transforming whiles into repeats. The code generator
changed to include booleans as well. Now all expressions get evaluated, and then in the case where
the expression was a condition the value of the result of the expression is checked. For relational
binaries conditional moves are used to make the result 0 or 1. 

The hard part of this assignment was the code generator for the functions. Below is how the 
stack frames / calling convension is laid out. All of the program scope variables live on the
stack in the main function stack frame. A global pointer called _globals is assigned the main
stack frame base pointer. This enables all functions to easily access these globals. Arguments
of functions are pushed on the stack in reverse order, and all have offsets from the base pointer
of the called function starting at +16 to leave room for the pushed bp and return address. Local
variables of functions live below that function's base pointer. This is all pretty standard for 
gcc x86. Of course all INTEGERs / BOOLEANs get alloted the full 64 bits (8 bytes). The return values
of functions are put into %rax. This is then generally pushed though in later version of the code
generator will not be.

HW7:

For this assignment I implemented the code generator for AMD64. Awkwardly,
there is no good register allocation and therefore each function pushes
its result on the stack for a future function to pop. All variables are stored
on the stack as local variables. INTEGERS are allocated the full 8 bytes. The
length of arrays are stored on the stack as a pseudo 'field' of the array for
referencing. 


HW6:

For this assignment we added the interpreter to the SC. This is used by
providing the -i option. The interpreter first creates an environment
by traversing the symbol table and creating full boxes for all variable
objects in the table. Then the interpreter traverses the AST and interprets
each Instruction node. All of the interpretation code is in Interpreter.java
while all of the boxes are in the environment package. 

HW5:

For this assignment we added the Abstract Syntax tree. To do this
we needed to include a large number of subclasses to Node. All of
these classes can be found in parser.ast. Additionally I added
A new type of visitor for displaying the ast. The ast is generated
throughout all of the non-terminal functions in parser.java. This
is accomplished by using the parsed tokens to create nodes recursively
as described by the abstract grammer of SIMPLE. Constant folding occurs
before an Expression is returned by expression(). This is also done
recursively by all the subclasses fold() methods. Additionally, the getType()
function for Locations was added to easily recusively check a Location
for the resulting type. 


HW4:

This assignment we added declaration handling and creation of
the symbol table. This was achieved by modifing the already existing
recursive decent functions to add values to the symbol table. 
Additionally, a new interface and two implementing classes were added,
visitors. They are in charge of generating the output for the
symbol table, when the -t option is chosen. The Graphical Parser
uses identityHashCodes to uniquely identify all objects, and
maintains a set of all predefined Types as to not re-define them.

HW3:

I have built the initial part of the parser for this assignment.
I used the recursive decent process described in lecture. If a 
failure is encountered a ParserException is thrown. The parser
calls all() from the scanner and then uses the list of tokens
to peak when needed and advance through the tokens when needed.
The parser also uses the observer sceme. An observer as defined
by the interface has three functions, decend, accend, and add. 
decend and accend essentially allow the observer to maintain a
stack trace. Add adds a new thing to the observer. The add function
is overloaded the String param is for non-terminals, while the Token
param is for the terminals. 

HW 2:

I have built the scanner and main driver the the SIMPLE compiler.
The scanner has two levels. The low level file reading, and the
higher level token parsing. The parsing uses a String buffer that
is generated by the file reading. The functions peak and nextChar
use the low level file reading seemlessly so that the parsing need
not care about the state of the buffer. A -1 is carried up through
the chain of functions when there is nothing left to read from the 
stream. The tokens that are generated contain the positioning of the
token in the source code as well as the type and original source code
text. The next function returns the next available token in the stream,
while the all function returns all tokens from the stream. next will 
return an EOF token when the end of the stream has been reached, while
all simply returns a Collection<Token>. 
 
